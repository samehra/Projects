from agents import Agent, Runner, InputGuardrail, GuardrailFunctionOutput, RunContextWrapper, TResponseInputItem, input_guardrail
from pydantic import BaseModel
import asyncio
import os
from dotenv import load_dotenv
from agents import set_default_openai_key

load_dotenv()

set_default_openai_key(os.environ.get("OPENAI_API_KEY", ""))

"""
Implementation of the Prompt Chaining workflow using OpenAI Agents SDK
Based on the workflow diagram:
Input ("In") → LLM Call 1 → Gate → Pass/Fail paths → LLM Call 2 → LLM Call 3 → Output ("Out")
"""

# Define output models for the agents
class OutlineOutput(BaseModel):
    """Model for the outline generated by the first LLM call"""
    outline: str

class OutlineCriteriaCheck(BaseModel):
    """Model for the gate checking if the outline meets criteria"""
    passes: bool
    feedback: str

class ExpandedSectionsOutput(BaseModel):
    """Model for the expanded sections from the second LLM call"""
    expanded_content: str

class FinalDocumentOutput(BaseModel):
    """Model for the final document from the third LLM call"""
    document: str

# Step 1: First LLM call - Generate outline
outline_agent = Agent(
    name="Outline Generator",
    instructions="""
    Your task is to create a well-structured outline for a document about the given topic.
    The outline should follow the style guide provided and include main sections and subsections.
    
    Format the outline with:
    - Main sections marked with numbers (1., 2., 3., etc.)
    - Subsections marked with letters (a., b., c., etc.)
    - Brief descriptions for each section
    """,
    output_type=OutlineOutput
)

# Step 2: Gate - Check if outline meets criteria
criteria_agent = Agent(
    name="Criteria Checker",
    instructions="""
    Your task is to evaluate if the outline meets all specified criteria.
    You must carefully assess the outline against each criterion and determine if it passes or fails.
    Provide clear feedback explaining your decision.
    """,
    output_type=OutlineCriteriaCheck
)

# Step 3: Second LLM call (if pass) - Expand outline into sections
expand_agent = Agent(
    name="Section Expander",
    instructions="""
    Your task is to expand each section of the approved outline into detailed paragraphs.
    For each section:
    1. Maintain the original structure
    2. Add 2-3 paragraphs of content
    3. Include relevant examples or supporting points
    """,
    output_type=ExpandedSectionsOutput
)

# Step 4: Third LLM call - Write final document
final_document_agent = Agent(
    name="Document Writer",
    instructions="""
    Your task is to transform the expanded sections into a polished, cohesive document.
    
    1. Add smooth transitions between sections
    2. Ensure consistent tone and style
    3. Include an introduction and conclusion
    4. Follow the provided style guide
    """,
    output_type=FinalDocumentOutput
)

async def create_document(topic, style_guide, criteria):
    """Main function to orchestrate the document creation workflow"""
    # Step 1: Generate initial outline
    print("Step 1: Generating outline...")
    outline_input = f"""
    Topic: {topic}
    Style Guide: {style_guide}
    
    Please generate a detailed outline for this topic.
    """
    outline_result = await Runner.run(outline_agent, outline_input)
    outline_output = outline_result.final_output_as(OutlineOutput)
    print("✓ Generated initial outline")
    
    # Step 2: Check if outline meets criteria and proceed with workflow
    print("Step 2: Checking if outline meets criteria...")
    
    # Check criteria first manually
    criteria_input = f"""
    Topic: {topic}
    Style Guide: {style_guide}
    
    Outline:
    {outline_output.outline}
    
    Criteria:
    {criteria}
    
    Does this outline meet all the specified criteria?
    """
    
    criteria_result = await Runner.run(criteria_agent, criteria_input)
    criteria_check = criteria_result.final_output_as(OutlineCriteriaCheck)
    
    if not criteria_check.passes:
        print(f"→ Criteria check: FAIL")
        print(f"✗ Document creation stopped: {criteria_check.feedback}")
        return None
    
    print("✓ Criteria check: PASS")
    
    # Step 3: Expand outline sections
    print("Step 3: Expanding outline sections...")
    expand_input = f"""
    Please expand this outline into detailed sections:
    
    {outline_output.outline}
    """
    
    expand_result = await Runner.run(expand_agent, expand_input)
    expanded_sections = expand_result.final_output_as(ExpandedSectionsOutput)
    print("✓ Expanded outline into detailed sections")
    
    # Step 4: Write final document
    print("Step 4: Writing final document...")
    document_input = f"""
    Style Guide: {style_guide}
    
    Please convert these expanded sections into a polished document:
    
    {expanded_sections.expanded_content}
    """
    
    document_result = await Runner.run(final_document_agent, document_input)
    final_document = document_result.final_output_as(FinalDocumentOutput)
    print("✓ Completed final document")
    
    return final_document.document

async def main():
    # Example usage
    topic = "The Impact of Artificial Intelligence on Modern Healthcare"
    
    style_guide = """
    - Use professional, academic tone
    - Include real-world examples
    - Keep paragraphs concise (3-4 sentences)
    - Use active voice
    - Target audience: Healthcare professionals
    """
    
    criteria = """
    1. Must have at least 3 main sections
    2. Must include both benefits and challenges
    3. Must address ethical considerations
    4. Must include future perspectives
    5. Must have clear logical flow between sections
    """
    
    final_document = await create_document(topic, style_guide, criteria)
    
    if final_document:
        print("\nFinal Document:")
        print("=" * 50)
        print(final_document)

if __name__ == "__main__":
    asyncio.run(main())
